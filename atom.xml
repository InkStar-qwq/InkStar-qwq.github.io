<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="https://www.w3.org/2005/Atom">
  <title>InkStar-qwq</title>
  
  <subtitle>You&#39;ve came and you left, leaving stars behind.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://inkstar-qwq.github.io/"/>
  <updated>2019-11-11T03:01:38.816Z</updated>
  <id>http://inkstar-qwq.github.io/</id>
  
  <author>
    <name>InkStar-qwq</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Update log</title>
    <link href="http://inkstar-qwq.github.io/2019/11/10/%E5%8D%9A%E5%AE%A2%E6%9B%B4%E6%96%B0%E6%97%A5%E5%BF%97/"/>
    <id>http://inkstar-qwq.github.io/2019/11/10/%E5%8D%9A%E5%AE%A2%E6%9B%B4%E6%96%B0%E6%97%A5%E5%BF%97/</id>
    <published>2019-11-09T16:00:00.000Z</published>
    <updated>2019-11-11T03:01:38.816Z</updated>
    
    <content type="html"><![CDATA[<h1 id="更新日志："><a href="#更新日志：" class="headerlink" title="更新日志："></a>更新日志：</h1><h2 id="v1-0-0："><a href="#v1-0-0：" class="headerlink" title="v1.0.0："></a>v1.0.0：</h2><p>1、搭建了这个blog；<br>2、加入了动态背景；</p><h2 id="v1-1-0："><a href="#v1-1-0：" class="headerlink" title="v1.1.0："></a>v1.1.0：</h2><p>1、加入置顶功能；<br>2、加入更新日志；<br>3、加入RSS；<br><del>4、加入点击效果</del>（然后因为太丑被移除）<br>5、加入LaTeX ；<br><a href="http://www.mohu.org/info/symbols/symbols.htm" target="_blank" rel="noopener">如何使用</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;更新日志：&quot;&gt;&lt;a href=&quot;#更新日志：&quot; class=&quot;headerlink&quot; title=&quot;更新日志：&quot;&gt;&lt;/a&gt;更新日志：&lt;/h1&gt;&lt;h2 id=&quot;v1-0-0：&quot;&gt;&lt;a href=&quot;#v1-0-0：&quot; class=&quot;headerlink&quot; title=
      
    
    </summary>
    
    
      <category term="About_this_blog" scheme="http://InkStar-qwq.github.io/categories/About-this-blog/"/>
    
    
  </entry>
  
  <entry>
    <title>C++头文件加速</title>
    <link href="http://inkstar-qwq.github.io/2019/11/08/c++%E5%A4%B4%E6%96%87%E4%BB%B6%E5%8A%A0%E9%80%9F/"/>
    <id>http://inkstar-qwq.github.io/2019/11/08/c++%E5%A4%B4%E6%96%87%E4%BB%B6%E5%8A%A0%E9%80%9F/</id>
    <published>2019-11-08T11:56:22.000Z</published>
    <updated>2019-11-10T13:30:52.165Z</updated>
    
    <content type="html"><![CDATA[<h1 id="真正的加速"><a href="#真正的加速" class="headerlink" title="真正的加速"></a><del>真正的加速</del></h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC diagnostic <span class="meta-keyword">error</span> <span class="meta-string">"-std=c++11"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC target(<span class="meta-string">"avx"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(3)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"Ofast"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"inline"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fgcse"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fgcse-lm"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fipa-sra"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-ftree-pre"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-ftree-vrp"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fpeephole2"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-ffast-math"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fsched-spec"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"unroll-loops"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-falign-jumps"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-falign-loops"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-falign-labels"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fdevirtualize"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fcaller-saves"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fcrossjumping"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fthread-jumps"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-funroll-loops"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fwhole-program"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-freorder-blocks"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fschedule-insns"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"inline-functions"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-ftree-tail-merge"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fschedule-insns2"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fstrict-aliasing"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fstrict-overflow"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-falign-functions"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fcse-skip-blocks"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fcse-follow-jumps"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fsched-interblock"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fpartial-inlining"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"no-stack-protector"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-freorder-functions"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-findirect-inlining"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fhoist-adjacent-loads"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-frerun-cse-after-loop"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"inline-small-functions"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-finline-small-functions"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-ftree-switch-conversion"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-foptimize-sibling-calls"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fexpensive-optimizations"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-funsafe-loop-optimizations"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"inline-functions-called-once"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fdelete-null-pointer-checks"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(3)</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;真正的加速&quot;&gt;&lt;a href=&quot;#真正的加速&quot; class=&quot;headerlink&quot; title=&quot;真正的加速&quot;&gt;&lt;/a&gt;&lt;del&gt;真正的加速&lt;/del&gt;&lt;/h1&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class
      
    
    </summary>
    
    
      <category term="Algorithm" scheme="http://InkStar-qwq.github.io/categories/Algorithm/"/>
    
    
  </entry>
  
  <entry>
    <title>11月8日 CSP-S模拟赛题解</title>
    <link href="http://inkstar-qwq.github.io/2019/11/08/11%E6%9C%888%E6%97%A5oiClass%20CSP-S%E6%A8%A1%E6%8B%9F%E8%B5%9B%E9%A2%98%E8%A7%A3/"/>
    <id>http://inkstar-qwq.github.io/2019/11/08/11%E6%9C%888%E6%97%A5oiClass%20CSP-S%E6%A8%A1%E6%8B%9F%E8%B5%9B%E9%A2%98%E8%A7%A3/</id>
    <published>2019-11-08T07:07:22.000Z</published>
    <updated>2019-11-10T13:30:14.203Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题-A-简单计算"><a href="#问题-A-简单计算" class="headerlink" title="问题 A: 简单计算"></a>问题 A: 简单计算</h2><p>时间限制: 1 Sec  内存限制: 256 MB</p><h3 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h3><p><img src="http://www.oiclass.com/upload/image/20191105/20191105183516_38652.png" alt="题目"></p><h3 id="输入："><a href="#输入：" class="headerlink" title="输入："></a>输入：</h3><p>第一行一个正整数T，表示该测试点内的数据组数，你需要对该测试点内的T组数据都分别给出正确的答案才能获得该测试点的分数。<br>接下来T组数据，每组数据一行两个正整数p,q。</p><h3 id="输出："><a href="#输出：" class="headerlink" title="输出："></a>输出：</h3><p>对每组数据输出一行一个整数表示答案。</p><h3 id="样例："><a href="#样例：" class="headerlink" title="样例："></a>样例：</h3><p><strong>输入：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">1 1</span><br><span class="line">3 5</span><br><span class="line">5 3</span><br><span class="line">2 4</span><br><span class="line">4 2</span><br></pre></td></tr></table></figure></p><p><strong>输出：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">9</span><br><span class="line">7</span><br><span class="line">6</span><br><span class="line">4</span><br></pre></td></tr></table></figure></p><h3 id="数据范围："><a href="#数据范围：" class="headerlink" title="数据范围："></a>数据范围：</h3><p>对于50%的数据，1≤p,q≤10000。<br>对于100%的数据，1≤T≤1000，1≤p,q≤1000000000；</p><h3 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h3><p><img src="http://www.oiclass.com/upload/image/20191105/20191105183650_13579.png" alt="题解"></p><p><strong>代码：</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span>  <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"> </span><br><span class="line">ll p,q;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">gcd</span><span class="params">(ll a,ll b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a&lt;b)<span class="keyword">return</span> gcd(b,a);</span><br><span class="line">    <span class="keyword">if</span>(b==<span class="number">0</span>)<span class="keyword">return</span> a;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> gcd(b,a%b);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);<span class="built_in">cin</span>.tie(<span class="number">0</span>);<span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;p&gt;&gt;q;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;((<span class="number">1</span>+p)*q-p+gcd(p,q)&gt;&gt;<span class="number">1</span>)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><h2 id="问题-B-格式化"><a href="#问题-B-格式化" class="headerlink" title="问题 B: 格式化"></a>问题 B: 格式化</h2><p>时间限制: 2 Sec  内存限制: 256 MB</p><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>小J掌管着一个大型的分布式系统，这个系统内有n块用于存储数据的硬盘，但是这些硬盘所用的文件系统并不一致，于是小J想要将这些硬盘格式化成相同的文件系统，但不幸的是，这些硬盘里全都装满了不能丢失的重要数据，而且硬盘在格式化之后容量有可能会发生变化。<br>为了解决这个问题，小J只好花钱去买额外的硬盘，当他对某块硬盘进行格式化之前，他需要将这块硬盘上的所有数据保存到一个或多个其它硬盘上（数据可以拆分，不同文件系统间移动大小不变），之后格式化这块硬盘，格式化后这块硬盘就有了小J所要的文件系统、新的容量，并且不存储任何数据，而且这块硬盘上原来的数据也得以保存（在其它硬盘上）——注意：不需要保证原来的数据仍以一整份存储在某块硬盘，也不需要保证原来的数据被存储在哪些硬盘上。<br>小J可以以任意的顺序格式化硬盘，但在每次格式化之前他都要保证这块硬盘的数据已经被妥善保存，你的任务就是给小J设计一种格式化硬盘的方案，使得小J所使用的额外的硬盘容量最小，你只需要输出需要的最少额外容量即可。</p><h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><p>每组数据第一行一个正整数n，表示硬盘块数，接下来n行，每行两个正整数，第一个正整数为硬盘格式化前的容量，第二个正整数为格式化之后的容量。</p><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><p>对每组数据输出一行一个正整数表示答案。</p><h3 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h3><p><strong>输入1:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">4</span><br><span class="line">6 6</span><br><span class="line">1 7</span><br><span class="line">3 5</span><br><span class="line">3 5</span><br></pre></td></tr></table></figure><br><strong>输出1：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1</span><br></pre></td></tr></table></figure><br><strong>输入2：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">4</span><br><span class="line">2 2</span><br><span class="line">3 3</span><br><span class="line">5 1</span><br><span class="line">5 10</span><br></pre></td></tr></table></figure><br><strong>输出2：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5</span><br></pre></td></tr></table></figure></p><h3 id="样例解释"><a href="#样例解释" class="headerlink" title="样例解释"></a>样例解释</h3><p>第一组数据中，先将第二块硬盘的数据存放到容量为1的额外硬盘上再进行格式化，其容量变为7，之后将第一块硬盘的数据保存到第二块硬盘上，格式化第一块硬盘，最后将剩下两块硬盘的数据保存到第一块硬盘上再进行格式化。<br>第二组数据中，至少需要大小为5的额外空间才能格式化最后一块硬盘，而格式化最后一块硬盘后其它硬盘的内容都可以被保存然后格式化，故答案为5。 </p><h3 id="数据规模与约定"><a href="#数据规模与约定" class="headerlink" title="数据规模与约定"></a>数据规模与约定</h3><p>对于前30%的数据，n≤10。<br>对于另外20%的数据，格式化后硬盘的容量均大于格式化前的硬盘容量。<br>对于前85%的数据，有n≤1000。<br>对于100%的数据，1≤n≤1000000，输入中所有的数都是不超过1000000000 =1000³的正整数。 </p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>若硬盘格式化后容量总是增大，那么我们将硬盘按格式化前的容量从小到大排序并依次进行格式化一定是最优的，而所需额外容量也很好计算——每当当前空闲容量小于待格式化的硬盘容量，那么就购买额外的容量来补充。</p><p>若硬盘格式化后容量总是减小，则我们可以按时间反向进行操作——从最终的状态开始，每次选取一个硬盘进行逆格式化，这时就转化为了前一种情况，因此我们如果正向进行操作时，选择先格式化格式化后容量较大的硬盘一定是最优的，所需额外的容量也可以进行类似的操作确定。</p><p>将二者结合起来，我们就可以得到最优方案：先按格式化前容量从小到大的顺序格式化格式化后容量增大的硬盘，再按格式化后容量从大到小的顺序格式化格式化后容量减小的硬盘即可，中途如果空闲空间不够那么就购买额外的硬盘空间补充。</p><p><strong>代码：</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">rec</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> a,b;</span><br><span class="line">&#125; e[<span class="number">2000001</span>],q1[<span class="number">2000001</span>],q2[<span class="number">20000001</span>];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> n,t1,t2;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> ans,now;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp1</span><span class="params">(rec a,rec b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.a&lt;b.a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp2</span><span class="params">(rec a,rec b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.b&gt;b.b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);<span class="built_in">cin</span>.tie(<span class="number">0</span>);<span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++) &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;e[i].a&gt;&gt;e[i].b;</span><br><span class="line">        <span class="keyword">if</span>(e[i].a&lt;=e[i].b)q1[++t1]=e[i];</span><br><span class="line">        <span class="keyword">else</span> q2[++t2]=e[i];</span><br><span class="line">    &#125;</span><br><span class="line">    sort(q1+<span class="number">1</span>,q1+t1+<span class="number">1</span>,cmp1);</span><br><span class="line">    sort(q2+<span class="number">1</span>,q2+t2+<span class="number">1</span>,cmp2);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=t1; i++) &#123;</span><br><span class="line">        now-=q1[i].a;</span><br><span class="line">        <span class="keyword">if</span>(now&lt;<span class="number">0</span>) &#123;</span><br><span class="line">            ans-=now;</span><br><span class="line">            now=q1[i].b;</span><br><span class="line">        &#125; <span class="keyword">else</span> now+=q1[i].b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=t2; i++) &#123;</span><br><span class="line">        now-=q2[i].a;</span><br><span class="line">        <span class="keyword">if</span>(now&lt;<span class="number">0</span>) &#123;</span><br><span class="line">            ans-=now;</span><br><span class="line">            now=q2[i].b;</span><br><span class="line">        &#125; <span class="keyword">else</span> now+=q2[i].b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;ans;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><h2 id="问题-C-真相"><a href="#问题-C-真相" class="headerlink" title="问题 C: 真相"></a>问题 C: 真相</h2><p>时间限制: 2 Sec  内存限制: 256 MB</p><h3 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h3><p>在每场OI比赛后，“我好弱啊”“您太强啦”“Orz”“我要爆0啦”这样的话常常出现在我们的耳边，真假难辨。而对于出题人来说，“我出的题很水”“这不就暴力一下么”“怎么没人AK啊”这样的话往往作为他们出完题后所反复念叨的话，同样也是真假难辨。单独判断一个人说话的真假完全可以根据个人经验来进行判断，而当一群OIer每人说一句并且互相关联的时候，问题就变得复杂起来了。</p><p>具体来说，现在一群大佬OIer们在进行聚会，一共n个人，他们排成了一个环，按顺时针顺序分别从1-n编号，每个人都说了如下三种类型的话之一：</p><p> 1、$ k：这群OIer里只有k个说实话，其他人都是说假话的卖弱大佬！</p><p>2、+：我顺时针方向的下一位说的是实话。</p><p>3、-：我顺时针方向的下一位是一位说假话的卖弱大佬！</p><p>虽然并不知道这群大佬OIer是怎么决定玩这个游戏的（<del>这究竟是人性的泯灭还是道德的沦丧？</del>）但是作为大佬，他们的本能使得他们想找出真相——判断这些人中哪些人说的是实话而哪些人是说假话的卖弱大佬。<br>然而事情并不简单，有时候他们会发现有多种可能，而有时候他们会发现他们所说的话无论如何都会自相矛盾，所以你的任务便是帮他们判断他们所说的话是否自相矛盾，如果无论如何都会自相矛盾，那么输出一行一个字符串inconsistent，否则输出consistent，为了方便，这时候他们就不需要你给出一种可能的每个人说话真假的判断了（<del>不然他们肯定会为了卖弱吵起来</del>）。</p><h3 id="输入-1"><a href="#输入-1" class="headerlink" title="输入"></a>输入</h3><p>第一行为一个正整数T，表示数据组数。<br>接下来T组数据，每组数据第一行一个正整数n表示OIer数量，接下来n行，第i行表示编号为i的人所说的话，格式如题面描述。</p><h3 id="输出-1"><a href="#输出-1" class="headerlink" title="输出"></a>输出</h3><p>对每组数据，如果这组数据里的OIer们说的话无论如何都会产生矛盾，那么就输出一行一个字符串inconsistent，否则输出一行一个字符串consistent。</p><h3 id="样例-1"><a href="#样例-1" class="headerlink" title="样例"></a>样例</h3><p><strong>输入：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">3</span><br><span class="line">+</span><br><span class="line">+</span><br><span class="line">$ 3</span><br><span class="line">3</span><br><span class="line">+</span><br><span class="line">-</span><br><span class="line">$ 3</span><br><span class="line">1</span><br><span class="line">-</span><br></pre></td></tr></table></figure><br><strong>输出：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">consistent</span><br><span class="line">consistent</span><br><span class="line">inconsistent</span><br></pre></td></tr></table></figure></p><h3 id="样例解释-1"><a href="#样例解释-1" class="headerlink" title="样例解释:"></a>样例解释:</h3><p>第一组数据中，三个人全部说真话可以满足条件。</p><p>第二组数据中，前两个人说真话，第三个人说假话可以满足条件（这时候一共有2个人说了真话，第三个人的描述自然不正确）</p><p>第三组数据中，一名无聊的OIer一个人产生了一个“这句话是假话”的悖论，因此无论如何他所说的话都自相矛盾。</p><h3 id="数据规模与约定-1"><a href="#数据规模与约定-1" class="headerlink" title="数据规模与约定:"></a>数据规模与约定:</h3><p>对于30%的数据，n,T≤10。</p><p>对于65%的数据，n≤1000。</p><p>对于100%的数据，1≤n,T≤100000，每个测试点内n的和不超过1000000。</p><h3 id="题解-转自：这里"><a href="#题解-转自：这里" class="headerlink" title="题解:(转自：这里)"></a>题解:(转自：<a href="https://www.cnblogs.com/wzc521/p/11771686.html" target="_blank" rel="noopener">这里</a>)</h3><p>如果没有第一种情况，那么可以假设第一个人说的是实话，然后暴力判断就好了。</p><p>现在考虑如何处理有第一种情况的情况。</p><p>如果一个人出现了第一种情况，那么直到上一个出现第一种情况的人之间这一段就已经被确认了，而这个人说话的真实性只有两种情况，如果他说的是正确的，那么与他同种（都是第一种情况，且k一样）的人也说的是对的，其余都是错的，所以可以预处理出来这个人说真话和说假话时该段说真话和说假话的人数。</p><p><strong>代码:</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">rec</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> opt,k;</span><br><span class="line">&#125; e[<span class="number">100001</span>];</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec;</span><br><span class="line"><span class="keyword">int</span> num[<span class="number">2</span>][<span class="number">100001</span>],fail,f[<span class="number">2</span>][<span class="number">100001</span>],con[<span class="number">100001</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pre_work</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    fail=<span class="number">0</span>;</span><br><span class="line">    vec.clear();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--) &#123;</span><br><span class="line">        pre_work();</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++) &#123;</span><br><span class="line">            <span class="keyword">char</span> ch[<span class="number">3</span>];</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%s"</span>,ch+<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">switch</span>(ch[<span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'$'</span>:</span><br><span class="line">                    e[i].opt=<span class="number">1</span>;</span><br><span class="line">                    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;e[i].k);</span><br><span class="line">                    vec.push_back(i);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'+'</span>:</span><br><span class="line">                    e[i].opt=<span class="number">2</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'-'</span>:</span><br><span class="line">                    e[i].opt=<span class="number">3</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!vec.size()) &#123;</span><br><span class="line">            <span class="keyword">bool</span> now=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)<span class="keyword">if</span>(e[i].opt==<span class="number">3</span>)now^=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(now)<span class="built_in">puts</span>(<span class="string">"consistent"</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"inconsistent"</span>);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;vec.size(); i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> pos=vec[i]+<span class="number">1</span>,nxt,now=<span class="number">1</span>,cnt=<span class="number">0</span>,tot=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(pos&gt;n)pos-=n;</span><br><span class="line">            <span class="keyword">if</span>(i==vec.size()<span class="number">-1</span>)nxt=vec[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">else</span> nxt=vec[i+<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=pos; j!=nxt;) &#123;</span><br><span class="line">                <span class="keyword">if</span>(now)cnt++;</span><br><span class="line">                <span class="keyword">if</span>(e[j].opt==<span class="number">3</span>)now^=<span class="number">1</span>;</span><br><span class="line">                tot++;</span><br><span class="line">                j++;</span><br><span class="line">                <span class="keyword">if</span>(j&gt;n)j-=n;</span><br><span class="line">            &#125;</span><br><span class="line">            con[++fail]=e[nxt].k;</span><br><span class="line">            <span class="keyword">if</span>(now) &#123;</span><br><span class="line">                cnt++;</span><br><span class="line">                num[<span class="number">0</span>][fail]=cnt;</span><br><span class="line">                num[<span class="number">1</span>][fail]=tot-cnt;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                num[<span class="number">0</span>][fail]=tot-cnt;</span><br><span class="line">                num[<span class="number">1</span>][fail]=cnt;</span><br><span class="line">            &#125;</span><br><span class="line">            f[<span class="number">0</span>][con[fail]]+=num[<span class="number">0</span>][fail];</span><br><span class="line">            f[<span class="number">1</span>][con[fail]]+=num[<span class="number">1</span>][fail];</span><br><span class="line">            sum+=num[<span class="number">1</span>][fail];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">bool</span> ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=n; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> cnt=f[<span class="number">0</span>][i]-f[<span class="number">1</span>][i]+sum;</span><br><span class="line">            <span class="keyword">if</span>(cnt==i) &#123;</span><br><span class="line">                ans=<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(ans)<span class="built_in">puts</span>(<span class="string">"consistent"</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"inconsistent"</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=fail; i++)f[<span class="number">0</span>][con[i]]=f[<span class="number">1</span>][con[i]]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;问题-A-简单计算&quot;&gt;&lt;a href=&quot;#问题-A-简单计算&quot; class=&quot;headerlink&quot; title=&quot;问题 A: 简单计算&quot;&gt;&lt;/a&gt;问题 A: 简单计算&lt;/h2&gt;&lt;p&gt;时间限制: 1 Sec  内存限制: 256 MB&lt;/p&gt;
&lt;h3 id=&quot;题目
      
    
    </summary>
    
    
      <category term="Solution" scheme="http://InkStar-qwq.github.io/categories/Solution/"/>
    
    
  </entry>
  
  <entry>
    <title>膜拜机房dalao</title>
    <link href="http://inkstar-qwq.github.io/2019/11/08/%E8%86%9C%E6%8B%9C%E6%9C%BA%E6%88%BFdalao/"/>
    <id>http://inkstar-qwq.github.io/2019/11/08/%E8%86%9C%E6%8B%9C%E6%9C%BA%E6%88%BFdalao/</id>
    <published>2019-11-08T05:45:15.785Z</published>
    <updated>2019-11-08T05:51:30.500Z</updated>
    
    <content type="html"><![CDATA[<h1 id="机房大佬-Orz"><a href="#机房大佬-Orz" class="headerlink" title="机房大佬 Orz"></a><a href="https://www.luogu.org/user/163175" target="_blank" rel="noopener">机房大佬</a> <em><strong>Orz</strong></em></h1><p>%%%%%%%%%%%%%%%%%%%%%%%%%</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;机房大佬-Orz&quot;&gt;&lt;a href=&quot;#机房大佬-Orz&quot; class=&quot;headerlink&quot; title=&quot;机房大佬 Orz&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.luogu.org/user/163175&quot; target=&quot;_blank&quot; re
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://inkstar-qwq.github.io/2019/11/08/hello-world/"/>
    <id>http://inkstar-qwq.github.io/2019/11/08/hello-world/</id>
    <published>2019-11-07T22:58:52.216Z</published>
    <updated>2019-11-08T02:39:00.897Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p><hr><p>这是一篇自带的hexo教程。</p><p>下面会整理一些用hexo搭建blog的必要事项和工具的下载链接</p><p>敬请期待</p><p><del>它鸽了，不用期待了</del></p><p><del>懒得写x10086</del></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Test</title>
    <link href="http://inkstar-qwq.github.io/2019/11/08/Markdown%E8%AF%AD%E6%B3%95%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/"/>
    <id>http://inkstar-qwq.github.io/2019/11/08/Markdown%E8%AF%AD%E6%B3%95%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/</id>
    <published>2019-11-07T16:00:00.000Z</published>
    <updated>2019-11-11T02:29:32.169Z</updated>
    
    <content type="html"><![CDATA[<h1 id="这是一级标题"><a href="#这是一级标题" class="headerlink" title="这是一级标题"></a>这是一级标题</h1><h2 id="这是二级标题"><a href="#这是二级标题" class="headerlink" title="这是二级标题"></a>这是二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级"><a href="#五级" class="headerlink" title="五级"></a>五级</h5><h6 id="六级"><a href="#六级" class="headerlink" title="六级"></a>六级</h6><p><del>####### 七级（好吧没了）</del></p><p>代码块测试<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span>  <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line">ll p,q;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">gcd</span><span class="params">(ll a,ll b)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(a&lt;b)<span class="keyword">return</span> gcd(b,a);</span><br><span class="line"><span class="keyword">if</span>(b==<span class="number">0</span>)<span class="keyword">return</span> a;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> gcd(b,a%b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);<span class="built_in">cin</span>.tie(<span class="number">0</span>);<span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">int</span> t;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line"><span class="keyword">while</span>(t--)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;p&gt;&gt;q;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;((<span class="number">1</span>+p)*q-p+gcd(p,q)&gt;&gt;<span class="number">1</span>)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>图片测试<br> <img src="https://cdn.luogu.com.cn/upload/image_hosting/ow02wgnr.png" alt="luogu"></p><p> <em>斜体文本</em><br>_斜体文本_<br><strong>粗体文本</strong><br><strong>粗体文本</strong><br><strong><em>粗斜体文本</em></strong><br><strong>_粗斜体文本_</strong></p><p>LaTeX:</p><script type="math/tex; mode=display">\alpha</script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;这是一级标题&quot;&gt;&lt;a href=&quot;#这是一级标题&quot; class=&quot;headerlink&quot; title=&quot;这是一级标题&quot;&gt;&lt;/a&gt;这是一级标题&lt;/h1&gt;&lt;h2 id=&quot;这是二级标题&quot;&gt;&lt;a href=&quot;#这是二级标题&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
    
      <category term="Test_files" scheme="http://InkStar-qwq.github.io/categories/Test-files/"/>
    
    
  </entry>
  
</feed>
